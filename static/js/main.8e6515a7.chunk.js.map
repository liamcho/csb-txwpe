{"version":3,"sources":["const.js","CustomizedMessageInput.js","CustomizedApp.js","styles.js","App.js","index.js"],"names":["APP_ID","USER_ID","NICKNAME","useStyles","makeStyles","input","display","withSendBird","props","classes","channel","disabled","sendUserMessage","sendFileMessage","sdk","_useState","useState","_useState2","Object","slicedToArray","inputText","setInputText","isInputEmpty","length","react_default","a","createElement","className","FormControl","variant","fullWidth","InputLabel","htmlFor","OutlinedInput","id","type","value","onChange","event","target","labelWidth","multiline","endAdornment","InputAdornment","position","accept","files","console","log","size","alert","params","FileMessageParams","file","url","then","message","catch","error","stack","IconButton","color","aria-label","component","AttachFile","onClick","UserMessageParams","Send","store","sendBirdSelectors","getSendUserMessage","getSdk","getSendFileMessage","isCustomizedInput","currentChannelUrl","setCurrentChannelUrl","_useState3","_useState4","showSettings","setShowSettings","index_es","onChannelSelect","onChatHeaderActionClick","channelUrl","renderMessageInput","_ref","user","src_CustomizedMessageInput","onCloseClick","selected","boxShadow","textTransform","backgroundColor","&:hover","unselected","border","rightButton","borderLeftWidth","App","setIsCustomizedInput","ButtonGroup","Button","concat","appId","userId","nickname","src_CustomizedApp","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8e6515a7.chunk.js","sourcesContent":["// put your own APP_ID here\n// get your app_id -> https://dashboard.sendbird.com/auth/signin\nexport const APP_ID = \"2D7B4CDB-932F-4082-9B09-A1153792DC8D\";\n\n// set your own USER_ID and NICKNAME\nexport const USER_ID = \"sendbirdian\";\nexport const NICKNAME = \"Sendbirdian\";\n\nexport const HIGHLIGHT = \"highlight\";\n\nexport default {\n  APP_ID,\n  USER_ID,\n  NICKNAME,\n  HIGHLIGHT\n};\n","import React, { useState } from \"react\";\nimport { sendBirdSelectors, withSendBird } from \"sendbird-uikit\";\nimport {\n  InputAdornment,\n  IconButton,\n  FormControl,\n  InputLabel,\n  OutlinedInput\n} from \"@material-ui/core\";\nimport {\n  AttachFile as AttachFileIcon,\n  Send as SendIcon\n} from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n  input: {\n    display: \"none\"\n  }\n});\n\nfunction CustomizedMessageInput(props) {\n  const classes = useStyles();\n\n  // props\n  const {\n    channel,\n    disabled,\n    // from mapStoreToProps\n    sendUserMessage,\n    sendFileMessage,\n    sdk\n  } = props;\n\n  // state\n  const [inputText, setInputText] = useState(\"\");\n  const isInputEmpty = inputText.length < 1;\n\n  // event handler\n  const handleChange = event => {\n    setInputText(event.target.value);\n  };\n\n  const sendFileMessage_ = event => {\n    if (event.target.files && event.target.files[0]) {\n      console.log(event.target.files[0]);\n\n      // Implement your custom validation here\n      if (event.target.files[0].size > 1 * 1000 * 1000) {\n        alert(\"Image size greater than 1 MB\");\n        return;\n      }\n\n      const params = new sdk.FileMessageParams();\n      params.file = event.target.files[0];\n\n      sendFileMessage(channel.url, params)\n        .then(message => {\n          console.log(message);\n          event.target.value = \"\";\n        })\n        .catch(error => {\n          console.log(error.stack);\n        });\n    }\n  };\n\n  const sendUserMessage_ = event => {\n    const params = new sdk.UserMessageParams();\n    params.message = inputText;\n    sendUserMessage(channel.url, params)\n      .then(message => {\n        console.log(message);\n        setInputText(\"\");\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  return (\n    <div className=\"customized-message-input\">\n      <FormControl variant=\"outlined\" disabled={disabled} fullWidth>\n        <InputLabel htmlFor=\"customized-message-input\">User Message</InputLabel>\n        <OutlinedInput\n          id=\"customized-message-input\"\n          type=\"txt\"\n          value={inputText}\n          onChange={handleChange}\n          // onKeyPress={event => console.log(event.key)}\n          labelWidth={105}\n          multiline\n          endAdornment={\n            <InputAdornment position=\"end\">\n              {isInputEmpty ? (\n                <div className=\"customized-message-input__file-container\">\n                  <input\n                    accept=\"image/*\"\n                    id=\"icon-button-file\"\n                    type=\"file\"\n                    className={classes.input}\n                    onChange={sendFileMessage_}\n                  />\n                  <label htmlFor=\"icon-button-file\">\n                    <IconButton\n                      color=\"primary\"\n                      aria-label=\"upload picture\"\n                      component=\"span\"\n                      disabled={disabled}\n                    >\n                      <AttachFileIcon\n                        color={disabled ? \"disabled\" : \"primary\"}\n                      />\n                    </IconButton>\n                  </label>\n                </div>\n              ) : (\n                <IconButton\n                  disabled={disabled}\n                  onClick={sendUserMessage_}\n                  // onMouseDown={sendUserMessage}\n                >\n                  <SendIcon color={disabled ? \"disabled\" : \"primary\"} />\n                </IconButton>\n              )}\n            </InputAdornment>\n          }\n        />\n      </FormControl>\n    </div>\n  );\n}\n\nconst mapStoreToProps = store => {\n  const sendUserMessage = sendBirdSelectors.getSendUserMessage(store);\n  const sdk = sendBirdSelectors.getSdk(store);\n  const sendFileMessage = sendBirdSelectors.getSendFileMessage(store);\n  return {\n    sendUserMessage,\n    sdk,\n    sendFileMessage\n  };\n};\n\nexport default withSendBird(CustomizedMessageInput, mapStoreToProps);\n","import React, { useState } from \"react\";\nimport {\n  Channel as SBConversation,\n  ChannelList as SBChannelList,\n  ChannelSettings as SBChannelSettings,\n  withSendBird\n} from \"sendbird-uikit\";\n\nimport CustomizedMessageInput from \"./CustomizedMessageInput\";\n\nfunction CustomizedApp(props) {\n  // props\n  const { isCustomizedInput } = props;\n\n  // useState\n  const [currentChannelUrl, setCurrentChannelUrl] = useState(\"\");\n  const [showSettings, setShowSettings] = useState(false);\n\n  return (\n    <div className=\"customized-app\">\n      <div className=\"sendbird-app__wrap\">\n        <div className=\"sendbird-app__channellist-wrap\">\n          <SBChannelList\n            onChannelSelect={(channel) => {\n              if (channel && channel.url) {\n                setCurrentChannelUrl(channel.url);\n              }\n            }}\n          />\n        </div>\n        <div className=\"sendbird-app__conversation-wrap\">\n          <SBConversation\n            onChatHeaderActionClick={() => {\n              if (showSettings) {\n                setShowSettings(false);\n              } else {\n                setShowSettings(true);\n              }\n            }}\n            channelUrl={currentChannelUrl}\n            renderMessageInput={\n              isCustomizedInput\n                ? ({ channel, user, disabled }) => (\n                    <CustomizedMessageInput\n                      channel={channel}\n                      user={user}\n                      disabled={disabled}\n                    />\n                  )\n                : null\n            }\n          />\n        </div>\n      </div>\n      {showSettings && (\n        <div className=\"sendbird-app__settingspanel-wrap\">\n          <SBChannelSettings\n            channelUrl={currentChannelUrl}\n            onCloseClick={() => {\n              setShowSettings(false);\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default withSendBird(CustomizedApp);\n","import { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n  selected: {\n    boxShadow: \"none\",\n    textTransform: \"none\",\n    color: \"rgba(255, 255, 255, 0.88)\",\n    backgroundColor: \"#7b53ef\",\n    \"&:hover\": {\n      backgroundColor: \"#7b53ef\",\n      boxShadow: \"none\"\n    }\n  },\n  unselected: {\n    textTransform: \"none\",\n    color: \"rgba(0, 0, 0, 0.5)\",\n    border: \"solid 1px rgba(0, 0, 0, 0.38)\",\n    \"&:hover\": {\n      color: \"#7b53ef\"\n    }\n  },\n  rightButton: {\n    borderLeftWidth: \"0px !important\"\n  }\n});\n\nexport default useStyles;\n","import React, { useState } from \"react\";\nimport { SendBirdProvider as SBProvider } from \"sendbird-uikit\";\nimport \"sendbird-uikit/dist/index.css\";\n\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nimport { APP_ID, USER_ID, NICKNAME } from \"./const\";\nimport CustomizedApp from \"./CustomizedApp\";\nimport \"./index.css\";\nimport useStyles from \"./styles\";\n\nexport default function App() {\n  const classes = useStyles();\n  const { selected, unselected, rightButton } = classes;\n  const [isCustomizedInput, setIsCustomizedInput] = useState(false);\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className=\"channel-selector\">\n        <div className=\"channel-selector__icons\">\n          <ButtonGroup>\n            <Button\n              className={isCustomizedInput ? unselected : selected}\n              onClick={() => setIsCustomizedInput(false)}\n              variant={isCustomizedInput ? \"outlined\" : \"contained\"}\n              size=\"large\"\n            >\n              Normal Input\n            </Button>\n            <Button\n              className={`${\n                isCustomizedInput ? selected : unselected\n              } ${rightButton}`}\n              onClick={() => setIsCustomizedInput(true)}\n              variant={isCustomizedInput ? \"contained\" : \"outlined\"}\n              size=\"large\"\n            >\n              Customized Input\n            </Button>\n          </ButtonGroup>\n        </div>\n      </div>\n      <SBProvider appId={APP_ID} userId={USER_ID} nickname={NICKNAME}>\n        <CustomizedApp isCustomizedInput={isCustomizedInput} />\n      </SBProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}